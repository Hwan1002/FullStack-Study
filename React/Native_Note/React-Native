※React Native 태그, 컴포넌트 및 함수 정리

※컴포넌트의 종류

1. <View>
ㄴ HTML에서의 DIV 같은 태그, TEXT등의 태그를 사용하려면 반드시 View를 
   사용하여 묶어줘야 한다.

2. <FlatList/>
ㄴ 데이터의 목록을 빠르고 간편하게 렌더링 하기 위한 컴포넌트
   일반적으로 배열의 형태의 데이터를 받아서 각 항목을 화면에 표시

data : 리스트에 표시할 데이터 배열
renderItem : 각 아이템을 어떻게 렌더링 할지 정의하는 함수
keyExtractor : 각 아이템을 고유한 키 값을 지정하는 속성


※함수--------------------------

<onPress>
ㄴ 클릭 이벤트

＊사용방법 : 

[함수를 호출할때]
onPress = {setCount(prev => prev+1)}
ㄴ 함수가 즉시 실행되어 결과를 반영한다.
ㄴ 렌더링 될때마다 실행이 될 수 있다.

함수를 전달
onPress = {() => {setCount +1}}
ㄴ 클릭 이벤트가 발생할 때 가지 setCount를 실행 하지 않고 기다릴 수 있다.


<스크롤 위치 알아내는법>
Hook을 만들어 그안에 스크롤 기능을 정의한다.

* 스크롤 위치를 저장하는 state
const [scrollPostion, setScrollPostion] = useState(0);

* 스크롤 위치를 얻어와서 state에 저장할 함수
- e.nativeEvent.contentOffset.y : y 방향 스크롤 위치
const handleScroll = (e) => {
   setScrollPosition(e.nativeEvent.contentOffset.y)
} 
* 밖에서 이 훅을 쓸때 반환 받을 스크롤 위치와 함수
return {scrollPosition, handleScroll};

-------------------------------------------------------------------------
<클린업 함수>

ㄴ 컴포넌트가 언마운트 되거나, useEffect가 다시 실행되기 전에 실행하는 함수
ㄴ 주로 리소스를 정리하거나, 이벤트 리스너를 제거하거나, 타이머를 정리하는 등
   필요한 뒷처리를 수행하기 위해 사용한다.
ㄴ 사용방법 : 
- useEffect는 첫 번째 인자로 함수를 받는데, 이함수는 다시 함수를 반환할 수 있다.
- 반환된 함수가 클린업 함수이다.
useEffect(()=>{
   console.log()
   return () => {} : 이 부분이 클린업 함수
},[])


-----------------------------------------------------------------------

<Navigation>

   - 화면을 쌓아가면서 이동하는 방식
   - 지원하는 네비게이션 종류 Stack,Tab,Drawer 3 종류가 있다.

<구조>

   - NavigationContainer 컴포넌트
   - Navigator 컴포넌트
   - Screen 컴포넌트

<스타일 주기>

   1. Navigator에 스타일 주기 -> 하위 스크린에도 다 적용
      - <Stack.Navigator initialRoutName="Home" screenOptions={{옵션}}>
  
   2. Screen 컴포넌트에 스타일 주기 -> 해당 스크린에만 적용
      - <Stack.Screen name="List" component={List} options={{옵션}}/>

   3. 화면으로 사용되는 컴포넌트에서 navigation 객체를 사용하여 스타일 주기 -> 해당 스크린에만 적용
      - const Item = ({navigation}) => {
         navigation.setOptions({옵션})
      }
<순서>

   1. 화면을 구성할 컴포넌트를 만든다.
   
   2. Navigation을 만들고 Screen 컴포넌트를 만든다.
   
   3. 각각의 Screen 컴포넌트에 우리가 만든 화면 컴포넌트를 할당한다.
   
   4. NavigationContainer 컴포넌트로 Navigation 컴포넌트를 감싼다.

<예시>

   <Stack.Navigator initialRoutName="Home">
      <Stack.Screen name="List" component={List}/>
      <Stack.Screen name="Home" component={Home}/>
      <Stack.Screen name="Item" component={Item}/>
   </Stack.Navigator>
  
- initialRoutName 에 정의한 이름이 가장 먼저 화면에 표출된다.






































