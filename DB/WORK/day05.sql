-- 사원테이블에서 직종, 평균급여를 출력하되
-- 평균 급여가 Bruce보다 큰 경우만 조회
SELECT JOB_ID,AVG(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID 
HAVING AVG(SALARY)>(SELECT SALARY FROM EMPLOYEES WHERE FIRST_NAME = 'Bruce');


--사원테이블에서 성에 'Bat'을 포함하는 사원과 같은 부서에서
--근무하는 사원들의 부서번호, 이름을 출력
SELECT DEPARTMENT_ID,FIRST_NAME 
FROM EMPLOYEES
WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM EMPLOYEES where LAST_NAME LIKE '%Bat%')

--사원테이블에서 100번 부서의 최소 급여보다 많이 받는
--다른 부서의 부서번호, 최소급여를 조회하세요

SELECT DEPARTMENT_ID, MIN(SALARY)
FROM EMPLOYEES 
GROUP BY DEPARTMENT_ID 
HAVING MIN(SALARY) > (SELECT MIN(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID=100);

SELECT DEPARTMENT_ID, MIN(SALARY)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID;

--PLAYER 테이블에서 TEAM_ID가 'K01'인 선수중
--POSITION이 'GK'인 선수
SELECT * FROM PLAYER WHERE TEAM_ID = 'K01' AND "POSITION" = 'GK';

--PLAYER테이블에서 전체 평균키와 포지션별 평균키 구하기
SELECT (SELECT AVG(HEIGHT) FROM PLAYER) AS TTAVGHEIGHT,"POSITION",AVG(HEIGHT)
FROM PLAYER
WHERE "POSITION" IS NOT NULL
GROUP BY "POSITION";


--AUTO COMMIT
--내가 실행하는 쿼리문이 테이블에 바로 반영
--COMMIT이 되면 되돌아가는 것이 불가능하다.


--PLAYER테이블에서 NICKNAME이 NULL인 선수들은
--정태민 선수의 닉네임으로 변경하기

UPDATE PLAYER
SET NICKNAME = (SELECT NICKNAME FROM PLAYER WHERE PLAYER_NAME = '정태민')
WHERE NICKNAME IS NULL;

SELECT NICKNAME FROM PLAYER;


--사원테이블에서 평균급여보다 낮은 사원들의 급여를 10%인상
UPDATE EMPLOYEES 
SET SALARY = SALARY * 1.1
WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES);

--PLAYER테이블에서 평균키보다 큰선수들을 삭제
DELETE FROM PLAYER WHERE (SELECT AVG(HEIGHT) FROM PLAYER) < HEIGHT;

--<SUBQUERY 명칭>
--SELECT 절에서 사용할때 : SCALAR
--FROM   절에서 사용할때 : IN LINE VIEW
--WHERE  절에서 사용할때 : SUB QUERY

/*CONCATENATION(연결)
||(연결기호)*/
--사원테이블에서 성과 이름 연결하기
SELECT FIRST_NAME||LAST_NAME FROM EMPLOYEES;

--xx의 급여는 xx이다.
SELECT FIRST_NAME||'의 급여는 '||SALARY||'이다.' FROM EMPLOYEES

SELECT count(salary) AS 개수,
	   max(salary) AS 최대값,
	   min(salary) AS 최소값,
	   sum(salary) AS 합,
	   avg(salary) AS 평균
FROM EMPLOYEES e 


--사원테이블에서 employee_id  를 사번, first_name을
--이름, salary를 급여로 별칭을 주고 전체내용 조회하기

SELECT EMPLOYEE_ID AS 사번, FIRST_NAME AS 이름 , SALARY AS 급여 FROM EMPLOYEES e


--두개 이상의 테이블에서 컬럼을 조회할 때
--어떤 테이블에서 온 컬럼인지 확실하게 적어줘야한다.
SELECT e.DEPARTMENT_ID d.DEPARTMENT_ID
FROM EMPLOYEES e, DEPARTMENTS d;


--사원테이블에는 부서명이 없다
--부서테이블에는 DEPARTMENT_ID 컬럼을 PK로 가지고있다.
--사원테이블에는 DEPARTMENT_ID 컬럼을 FK로 가지고있다.

--<INNER JOIN>
 SELECT E.FIRST_NAME, E.DEPARTMENT_ID, D.DEPARTMENT_NAME 
 FROM EMPLOYEES E JOIN DEPARTMENTS D 
 ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

--부서테이블, 지역테이블로부터 부서명과 도시명을 조회하세요
SELECT D.DEPARTMENT_NAME, L.CITY 
FROM DEPARTMENTS D JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID;

--지역테이블과 나라테이블을 조회하여
--도시명과 국가명을 조회하세요
SELECT L.CITY , C.COUNTRY_NAME 
FROM LOCATIONS L JOIN COUNTRIES C
ON L.COUNTRY_ID = C.COUNTRY_ID;

--이름,성,직종,직업명을 조회
--EMPLOYEES, JOBS테이블을 이용
SELECT FIRST_NAME, LAST_NAME, E.JOB_ID, JOB_TITLE 
FROM EMPLOYEES E JOIN JOBS J
ON E.JOB_ID = J.JOB_ID;

-- 세개의 테이블 조인하기
-- 사원,부서, 지역테이블로부터 이름, 이메일,부서번호,부서이름,지역ID,도시 조회
SELECT 
E.FIRST_NAME,
E.EMAIL ,
E.DEPARTMENT_ID,
D.DEPARTMENT_NAME,
L.LOCATION_ID,
L.CITY
FROM EMPLOYEES E JOIN DEPARTMENTS D 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID
AND L.CITY = 'Seattle';

SELECT E2.ENAME 직원, E2.MGR, E1.ENAME 상사,E1.EMPNO 
FROM EMP E1 JOIN EMP E2
ON E1.EMPNO = E2.MGR;

CREATE TABLE 테이블A(
	A_ID NUMBER,
	A_NAME VARCHAR2(10)
);

CREATE TABLE 테이블B(
	B_ID NUMBER,
	B_NAME VARCHAR2(10)
);

INSERT ALL
INTO 테이블A values(1,'Jhon')
INTO 테이블A values(2,'Jane')
INTO 테이블A values(3,'Bob')
INTO 테이블B values(101,'Apple')
INTO 테이블B values(102,'Banana')
SELECT * FROM dual;

SELECT * FROM 테이블A; --3
SELECT * FROM 테이블B; --2

SELECT * FROM 테이블A CROSS JOIN 테이블B;



--<LEFT OUTER JOIN>
--사원테이블과 부서테이블의 LEFT OUTER JOIN을 이용하여
--사원이 어느 부서에 있는지 조회하기
SELECT E.FIRST_NAME, D.DEPARTMENT_NAME
FROM EMPLOYEES E LEFT OUTER JOIN  DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

--<RIGHT OUTER JOIN>
--사원테이블과 부서테이블의 RIGHT OUTER JOIN을 이용하여
--사원이 어느 부서에 있는지 조회하기
SELECT E.FIRST_NAME, D.DEPARTMENT_NAME
FROM EMPLOYEES E RIGHT OUTER JOIN DEPARTMENTS D
ON E.EMPLOYEE_ID = D.DEPARTMENT_ID;

--<FULL OUTER JOIN>
--두 테이블에서 '모든 값'을 반환한다.
--만약 공통된 값을 가지고 있지 않는 행이 있다면 NULL값을 반환한다.
SELECT E.FIRST_NAME, D.DEPARTMENT_NAME
FROM EMPLOYEES E FULL OUTER JOIN DEPARTMENTS D
ON E.EMPLOYEE_ID = D.DEPARTMENT_ID;

--TEAM 테이블과 STADIUM 테이블을 통해 홈팀이 있는 구장만(LEFT JOIN) 없는 구장도 포함 (RIGHT)
--팀이름과 구장이름으로 조회
SELECT T.TEAM_NAME, S.STADIUM_NAME 
FROM TEAM T RIGHT OUTER JOIN STADIUM S
ON T.TEAM_ID = S.HOMETEAM_ID 
--WHERE S.HOMETEAM_ID IS NOT NULL;


--VIEW 생성방법
--사원테이블에서 누가 얼마받는지에 대한 조회
-- 수정하려면 CREATE OR REPLACE VIEW명 AS
CREATE VIEW MY_EMPL AS(	
	SELECT EMPLOYEE_ID,FIRST_NAME,SALARY
	FROM EMPLOYEES
);
SELECT * FROM MY_EMPL;

SELECT * FROM PLAYER;
--뷰이름 PLAYER_AGE
--선수의 이름과 나이를 구해주세요
CREATE OR REPLACE VIEW PLAYER_AGE AS(
	SELECT PLAYER_NAME,FLOOR(MONTHS_BETWEEN(SYSDATE,BIRTH_DATE)/12) AS AGE
	FROM PLAYER 
);

SELECT * FROM PLAYER_AGE;

--나이가 30살 이상인 선수들만 검색하시오
SELECT * FROM PLAYER_AGE WHERE AGE >= 30;


--뷰이름 : DATA_PLUS
--급여를 많이 받는 순으로 순위와 이름, 급여를 조회하는 쿼리 넣기
CREATE OR REPLACE VIEW DATA_PLUS AS(
	SELECT DENSE_RANK() OVER(ORDER BY SALARY DESC) AS "RANK", FIRST_NAME, SALARY
	FROM EMPLOYEES
);
SELECT * FROM DATA_PLUS;

--PLAYER 테이블 뒤에 TEAM_NAME 컬럼을 추가한 VIEW 만들기
--JOIN을 사용하면 됨
--뷰이름:PLAYER_TEAM_NAME
CREATE OR REPLACE VIEW PLAYER_TEAM_NAME AS(
	SELECT P.*,T.TEAM_NAME
	FROM PLAYER P LEFT OUTER JOIN TEAM T
	ON P.TEAM_ID = T.TEAM_ID
);

SELECT * FROM PLAYER_TEAM_NAME;

--HOMETEAM_ID, STADIUM_NAME, TEAM_NAME을 조회
--홈팀이 없는 경기장도 검색하기
--뷰이름 : STADIUM_INFO

CREATE OR REPLACE VIEW STADIUM_INFO AS(
	SELECT S.HOMETEAM_ID,S.STADIUM_NAME,T.TEAM_NAME
	FROM TEAM T RIGHT OUTER JOIN STADIUM S
	ON T.TEAM_ID = S.HOMETEAM_ID
);

SELECT * FROM STADIUM_INFO;


--홈팀이 없는 경기장을 검색하기
SELECT * FROM STADIUM_INFO	 WHERE HOMETEAM_ID IS NULL;


--EMPLOYESS테이블에서 JOB_ID가 'IT_PROG'인 사람의 이름을
--자신의 이름으로 바꾸기
UPDATE EMPLOYEES SET 
FIRST_NAME = '장환석' 
WHERE JOB_ID = 'IT_PROG';

SELECT * FROM EMPLOYEES;

--데이터 베이스에 영향을 주는 INSERT, UPDATE,DELETE문에서 많이 사용된다.
