/*USER      
U_ID(PK)    	VARCHAR2(100)
U_PW       	VARCHAR2(100)
U_NAME    	VARCHAR2(200)
U_ADDRESS	VARCHAR2(300)
U_EMAIL      	VARCHAR2(300)
U_BIRTH		DATE
--------------
ORDER		
O_NUM		NUMBER      
O_DATE      	DATE
U_ID(FK)      	VARCHAR2(100) //기존 프라이머리키와 타입이 일치해야함
P_NUM(FK)	NUMBER
--------------
PRODUCT   
P_NUM(PK)   	NUMBER
P_NAME      	VARCHAR2(100)
P_PRICE   	NUMBER
P_COUNT		NUMBER*/
CREATE TABLE "USER"(
	U_ID VARCHAR2(100),
	U_PW VARCHAR2(100),
	U_NAME VARCHAR2(200),
	U_ADDRESS VARCHAR2(300),
	U_EMAIL VARCHAR2(300),
	U_BIRTH DATE,
	CONSTRAINT PK_ID PRIMARY KEY(U_ID)
);

CREATE TABLE PRODUCT(
P_NUM NUMBER,
P_NAME VARCHAR2(100),
P_PRICE NUMBER,
P_COUNT NUMBER,
CONSTRAINT PK_NUM PRIMARY KEY (P_NUM)
);

CREATE TABLE "ORDER"(
	O_NUM NUMBER PRIMARY KEY,
	O_DATE DATE,
	U_ID VARCHAR2(100),
	P_NUM NUMBER,
	CONSTRAINT FK_ID  FOREIGN KEY(U_ID) REFERENCES "USER"(U_ID),
	CONSTRAINT FK_NUM FOREIGN KEY(P_NUM) REFERENCES PRODUCT (P_NUM)
);


CREATE TABLE FLOWER(
	F_NAME VARCHAR2(200) PRIMARY KEY,
	F_COLOR VARCHAR2(100),
	F_PRICE NUMBER
);

CREATE TABLE POT(
	P_NUM NUMBER PRIMARY KEY,
	P_COLOR VARCHAR2(100),
	P_SHAVE VARCHAR2(100),
	F_NAME VARCHAR2(200),
	CONSTRAINT FK_NAME FOREIGN KEY(F_NAME) REFERENCES FLOWER(F_NAME)
);


/*3.CD 정보를 데이터베이스에 저장하려고 한다.
CD는 타이틀, 가격, 장르, 트랙 리스트 등의 정보를 가지고 있다.
각 CD는 아티스트가 있으며 아티스트는 여러 CD를 출반한다.
트랙은 타이틀, 러닝타임(초)이 있다.
개체와 관계
개체(Entity)
CD : 타이틀, 가격, 장르, 트랙 리스트
아티스트 : 이름, 국적, 데뷔년도
트랙 : 타이틀, 러닝타임
관계(Relationship)
CD와 아티스트는 N:1(한명의 아티스트는 여러 CD를 낼 수 있다.)
CD와 트랙은 1:N(하나의 CD에는 여러 트랙이 포함될 수 있다.)*/

--1.테이블로 변환하시오
CREATE TABLE ARTIST(
	A_NAME VARCHAR2(200) PRIMARY KEY,
	COUNTRY VARCHAR2(100),
	DEYEAR DATE
);

CREATE TABLE CD(
	C_TITLE VARCHAR2(200) PRIMARY KEY,
	PRICE NUMBER,
	GENRE VARCHAR2(100),
	TR_LIST VARCHAR2(200),
	A_NAME VARCHAR2(200),
	CONSTRAINT CD_FK FOREIGN KEY (A_NAME) REFERENCES ARTIST(A_NAME)
);

CREATE TABLE TRACK(
	T_TITLE VARCHAR2(200) PRIMARY KEY,
	RUN_TIME NUMBER,
	C_TITLE VARCHAR2(200),
	CONSTRAINT TRACK_FK FOREIGN KEY (C_TITLE) REFERENCES CD(C_TITLE)
);
--2.DDL문 작성하기
/*CD TABLE
 *	TITLE VARCHAR2(200) PRIMARY KEY,
 *  PRICE NUMBER,
 *  GENRE VARCHAR2(100),
 *  TR_LIST NUMBER
 * 
 *ARTIST TABLE
 *	NAME VARCHAR2(200) PRIMARY KEY,
 *	NATION VARCHAR2(100),
 *	DEVIEW DATE
 * 
 * 
 *TRACK TABLE
 *	TR_TITLE VARCHAR2(200) PRIMARY KEY,
 *	RUN_TIME TIME
 *---------------------------------------------------------------
 *회사의 정보를 DB에 저장하려고한다.
 *- 회사는 네 개의 부서를 운영한다. 부서는 (부서번호, 부서이름)을 저장한다.
 *- 부서는 1명 이상의 직원 (직원번호, 직원이름, 직책)을 두고 있다. 각 직원은 하나의 부서에 소속된다.
 *- 직원은 부양가족(이름, 나이)이 있을 수 있다.(누구의 가족인지 알아야겠죠? : 가장)
 *- 각 직원은 근무했던 부서에 대한 근무기록(기간,직책)이 있다. (누가 일했는지 알아야겠죠? : 담당자)
 *
 *1. 개념 모델링
 *	부서 
 *	-------
 *	부서번호 
 *	부서이름
 *
 *	직원
 *	-------
 *	직원 번호
 *	직원 이름
 *	직책
 *
 *	부양가족
 *	------
 *	이름
 *	나이
 *	가장 
 *	
 *	근무기록
 *	------
 *	기간
 *	담당자
 *2. 논리 모델링
 *	부서 
 *	-------
 *	부서번호 (PK)
 *	부서이름
 *
 *	직원
 *	-------
 *	직원 번호(PK)
 *	직원 이름
 *	직책
 *
 *	부양가족
 *	------
 *	이름
 *	나이
 *	가장 (PK)
 *	
 *	근무기록
 *	------
 *	기간
 *	담당자 (PK)
 *	
 *	
 *
 *3. 물리 모델링
 *
 *	TABLE DEPARTMENT
 *	DP_NUMBER NUMBER,
 *	DP_NAME VARCHAR2(200),
 *	EP_NAME VARCHAR2(200),
 *	CONSTRAINT NAME FOREIGN KEY (EP_NAME) REFERENCE EMPLOY(EP_NAME)
 *
 *	TABLE EMPLOY
 *	EP_NUM NUMBER,
 *	EP_NAME VARCHAR2(200),
 *	EP_POSITION VARCHAR2(200)
 *	
 *	TABLE FAMILY
 *	PR_NAME VARCHAR2(200),
 *	PR_AGE NUMBER,
 *	EP_NAME VARCHAR2(200)
 *
 *	TABLE RECORD
 *	WORK_DT DATE,
 *	EP_POSITION VARCHAR2(200),
 *	EP_NAME VARCHAR2(200)
 */
CREATE TABLE EMPLOY(
	EP_NUM NUMBER PRIMARY KEY,
 	EP_NAME VARCHAR2(200),
 	EP_POSITION VARCHAR2(200)
);

CREATE TABLE DEPARTMENT(
	DP_NUMBER NUMBER,
	DP_NAME VARCHAR2(200) PRIMARY KEY,
	EP_NUM NUMBER,
	CONSTRAINT NAME FOREIGN KEY (EP_NUM) REFERENCES EMPLOY(EP_NUM)
);


CREATE TABLE FAMILY(
	PR_NAME VARCHAR2(200),
	PR_AGE NUMBER,
	EP_NUM NUMBER PRIMARY KEY,
	CONSTRAINT F_NAME FOREIGN KEY (EP_NUM) REFERENCES EMPLOY(EP_NUM)
);

CREATE TABLE RECORD(
	WORK_DT DATE,
	EP_POSITION VARCHAR2(200),
	EP_NUM NUMBER PRIMARY KEY,
	CONSTRAINT RE_NAME FOREIGN KEY (EP_NUM) REFERENCES EMPLOY(EP_NUM)
);


SELECT EMPLOYEE_ID, FIRST_NAME FROM EMPLOYEES;

--EMPLOYEES 테이블의 컬럼 조회
--SELECT * FROM COLS WHERE TABLE_NAME = 'EMPLOYEES';

--EMPLOYEES 테이블 전체 조회
SELECT * FROM EMPLOYEES ;

--DEPARTMENT 테이블의 전체를 조회하세요
SELECT * FROM DEPARTMENT;

--사원테이블에서 이름,직종, 급여를 조회해보세요
SELECT FIRST_NAME, JOB_ID, SALARY FROM EMPLOYEES ORDER BY SALARY DESC;

--컬럼에 실제로 없는 정보도 출력가능
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID, SALARY, COMMISSION_PCT, SALARY*COMMISSION_PCT AS SC 
FROM EMPLOYEES WHERE SALARY*COMMISSION_PCT IS NOT NULL;

--사원테이블에서 급여가 10000이상인 사원들의 정보를 사번,이름,급여순으로 출력
SELECT EMPLOYEE_ID,FIRST_NAME,SALARY
FROM EMPLOYEES
WHERE SALARY >= 10000
ORDER BY SALARY DESC; 

--사원테이블에서 이름이 Michael인 사원의 사번,이름을 조회
--문자열 데이터는 ''에 넣어서 표현
SELECT EMPLOYEE_ID,FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME = 'Michael';

--사원테이블에서 직종이 IT_PROG인 사원들의 정보를 사번,이름,직종,급여 순으로 조회
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID,SALARY
FROM EMPLOYEES
WHERE JOB_ID = 'IT_PROG'
ORDER BY SALARY DESC; 

--사원테이블에서 급여가 10000이상 13000이하인 사원의 정보를 이름, 급여 순으로 조회하세요
SELECT FIRST_NAME,SALARY
FROM EMPLOYEES
--WHERE SALARY >= 10000 AND SALARY <=13000
WHERE SALARY BETWEEN 10000 AND 13000
ORDER BY SALARY DESC;

--사원테이블에서 입사일이 05년9월21일 이후에 입사한 사원의 정보를 사번, 이름, 입사일 순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME, HIRE_DATE
FROM EMPLOYEES
WHERE HIRE_DATE >= '05-09-21'
ORDER BY HIRE_DATE DESC;;

--사원테이블에서 입사일이 2006년도에 입사한 사원들의 정보를 사번, 이름, 직종, 입사일순으로 출력
SELECT EMPLOYEE_ID, FIRST_NAME, JOB_ID ,HIRE_DATE
FROM EMPLOYEES 
WHERE HIRE_DATE BETWEEN '2006-01-01' AND '2006-12-31'
ORDER BY HIRE_DATE;

--사원테이블에서 직종이 'SA_MAN'이거나 'IT_PROG'인 사원들의 모든정보를 출력
SELECT *
FROM EMPLOYEES
WHERE JOB_ID = 'SA_MAN' OR JOB_ID='IT_PROG'
ORDER BY HIRE_DATE;

--사원테이블에서 급여가 2000,3200,5000,6000 받는 사원들의 정보를 사번,이름,직종,급여 순으로 조회
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID,SALARY
FROM EMPLOYEES
WHERE SALARY = 2200 OR SALARY = 3200 OR SALARY = 5000 OR SALARY =6000
ORDER BY SALARY DESC;

------------------------------------------
--IN연산자(값,값,값)
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID,SALARY
FROM EMPLOYEES
WHERE SALARY  IN(2200, 3200, 5000, 6000)
ORDER BY SALARY DESC;

--직종이 'SA_MAN', 'IT_PROG'가 아닌 모든 사원의 정보를 출력
SELECT * FROM EMPLOYEES WHERE JOB_ID NOT IN ('SA_MAN', 'IT_PROG');

--LIKE 유사검색
--WHERE절에서 사용되며 부분적으로 일치하는 속성을 찾을 때 사용된다.
-- % : 모든값
-- _ : 하나의 값


--사원테이블에서 사원들의 이름 중 M으로 시작하는 사원의 정보를 사번, 이름, 직종 순으로 출력
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID
FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'M%';

--사원테이블에서 이름이 d로 끝나는 사원의 사번, 이름 직종을 출력
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%d';

--사원테이블에서 이름에 a가 포함되어 있는 사원의 정보를 이름, 직종 순으로 출력
SELECT EMPLOYEE_ID,FIRST_NAME,JOB_ID
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%a%'
ORDER BY EMPLOYEE_ID;

--이름의 첫글자가 M이면서 총 7글자의 이름을 가진 사원의 정보를 사번, 이름순으로 검색
SELECT EMPLOYEE_ID,FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'M______'
ORDER BY EMPLOYEE_ID;

--사원테이블에서 이름의 세번째 글자에 a가들어가는 사원들의 정보를 사번, 이름 순으로 출력
SELECT EMPLOYEE_ID,FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '__a%'
ORDER BY EMPLOYEE_ID;

--이름에 소문자 o가 들어가면서 a로 끝나는 사원들의 정보를 이름, 급여순으로 조회
SELECT FIRST_NAME,SALARY 
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%o%a'
ORDER BY SALARY;

--이름이 H로 시작하면서 6글자 이상인 사원들의 정보를 사번, 이름순으로 조회
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE 'H_____%'
ORDER BY EMPLOYEE_ID;

--사원테이블에서 이름에 s가 들어있지 않은 사원들만 사번, 이름으로 검색하세요
SELECT EMPLOYEE_ID, FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME NOT LIKE '%s%'
ORDER BY EMPLOYEE_ID;

SELECT EMPLOYEE_ID ,FIRST_NAME
FROM EMPLOYEES
WHERE FIRST_NAME LIKE '%el%' OR FIRST_NAME LIKE '%en%';

--언더바 자체를 조회하고 싶으면 이스케이프문자 '%\_%';를 써야한다
