<NOT NULL과 DEFAULT의 차이점>

EX) GENDER CHAR(1) DEFAULT 'W'

데이터를 넣었을때
/*QUERY1*/
INSERT INTO TBL_STUDENT GENDER VALUES(NULL);
데이터를 아무것도 안넣었을때
/*QUERY2*/
INSERT INTO TBL_STUDENT GENDER VALUES();

쿼리1은 'NULL'이라는 특정한 값을 받았다고 생각하기 때문에 DEFAULT 값이 안들어간다.

쿼리2는 아무런 입력도 받지 않았다고 생각하기 때문에 DEFAULT값인 'W'가 설정된다.

1. NOT NULL만 선언한 경우
- 쿼리 1의 경우 : NOT NULL이 동작을 한다.
- 쿼리 2의 경우 : NOT NULL이 동작을 한다.

2.두개 다 선언한 경우 (DEFAULT와 NOT NULL을 동시에 사용한 경우)
쿼리1의 경우 : DEFAULT가 동작하여 기본값이 들어감
쿼리2의 경우 : NOT NULL이 동작하여 오류남

무결성
- 데이터베이스에 저장된 값과 현실 세계의 실제 값이 일치하는지 정확성을 의미
- 무결성 제약조건은 DB에 들어있는 데이터의 정확성을 보장하기 위해
  부정확한 자료가 DB내에 저장되는 것을 방지하기 위한 제약조건을 말한다.
- 데이터의 정확성, 일관성, 유효성이 유지되는것.
- 일관된 데이터베이스 상태를 정의하는 규칙을 묵시적 또는 명시적으로 정의함
- 정확성 : 중복이나 누락이 없는 상태 
- 일관성 : 원인과 결과의 의미가 연속적으로 보장되어 변하지 않는 상태
- 유효성 : 사용자로부터 값을 입력받을 때 정확한 값만 입력되도록 할 때 유효한 기능

1. 개체무결성
- PK(PRIMARY KEY)로 선택된 컬럼은 고유한 값을 가져야 하며, NULL값을 허용하지않는다.

2. 참조무결성
- 외래키 값은 NULL이거나 참조 테이블의 기본키 값과 동일해야 한다.
- 즉, 테이블은 참조할 수 없는 외래키 값을 가질 수 없다.

3. 도메인 무결성
- 도메인이란 : 하나의 속성이 가질 수 있는 데이터의 집합
	      ex) 성별{'남','여'} 이 외의 데이터들이 들어오면 안됌
- 주어진 속성의 값들이 도메인에 속한 값이어야 한다는 규정
- <수강> 이라는 테이블에 '과목명'이라는 속성에 영어,수학, 국어 세 가지만 입력되도록 유효한 값을 가지는 경우
- 반드시 도메인에 속한 값만 입력해야 한다.

4. 사용자 정의 무결성
- 속성 값들이 사용자가 정의한 제약 조건에 만족해야 한다는 규정이다.

모델링
- 정보 시스템 구축의 대상이 되는 업무 내용을 분석하여 이해하고 약속된 표기법에 의해
  표현하는걸 의미한다.
- 분석된 모델을 가지고 실제 데이터베이스를 생성하여 개발 및 데이터관리에 사용한다.
- 특히 데이터를 추상화한 데이터 모델은 데이터 베이스의 골격을 이해하고 그 이해를 바탕으로
  SQL문장을 기능과 성능적인 측면에서 효율적으로 작성할 수 있기 때문에 데이터 모델링은 데이터베이스
  설계의 핵심 과정이기도 하다.

데이터 모델링의 특징 
- 추상화 : 현실세계를 일정한 형식에 맞춰 간략하게 표현해야 한다.
- 단순화 : 누구나 쉽게 이해할 수 있도록 제한된 표기법이나 언어를 사용해야 한다.
- 명확화 : 명확하게 의미가 해석되어야 하고, 한가지 의미만을 가져야 한다.

1. 요구사항 분석
- 고객과의 의사소통을 통해 고객의 업무 프로세스를 완벽하게 이해하고
  그들의 요구사항을 구체적으로 뽑아내는 과정

2. 개념적 데이터 모델링
- 내가 하고자 하는 일의 데이터 간의 관계를 구상하는 단계 이다.
- 각 개체들과 그들간의 관계를 발견하고 표현하기 위해 
  ERD (Entity- Relationship Diagram) 다이어그램을 생성한다.
- 피터 첸 표기법(Peter Chen Notation)으로 ERD 다이어그램을 구성한 그림이다.
- 도형이 의미하는 바를 알고 화살표를 통해 관계를 표현하기만 하면 된다.

3. 논리적 데이터 모델링
- 개념적인 데이터 모델이 완성되면, 구체화된 업무 중심의 데이터 모델을 만들어 내야한다.
- 업무에 대한 Key, 속성, 관계등을 표시하며, 정규화 활동을 수행한다.
- 정규화는 데이터 모델의 일관성을 확보하고 중복을 제거하여 신뢰성있는 데이터 구조를 얻는데 목적이 있다.


조합키
- 두 개 이상의 컬림이 하나의 기본키로 작동하기 때문에 두개가 완전히 일치하는 데이터가 올 수 없다.
- 조합키 만드는법
CREATE TABLE TEST(
	Col1 varchar2(30),
	Col2 number,
	CONSTRAIN TEST_PK PRIMARY KEY(Col1,Col2)
)

4. 물리적 데이터 모델링
- 최종적으로 데이터를 관리할 데이터베이스를 선택하고, 선택한 데이터 베이스에
  실제 테이블을 만드는 작업을 말한다.
- 시각적인 구조를 만들었으면 실제로 SQL코딩을 통해 완성하는 단계


USER      
U_ID(PK)    	VARCHAR2(100)
U_PW       	VARCHAR2(100)
U_NAME    	VARCHAR2(200)
U_ADDRESS	VARCHAR2(300)
U_EMAIL      	VARCHAR2(300)
U_BIRTH		DATE
--------------
ORDER		
O_NUM		NUMBER      
O_DATE      	DATE
U_ID(FK)      	VARCHAR2(100) //기존 프라이머리키와 타입이 일치해야함
P_NUM(FK)	NUMBER
--------------
PRODUCT   
P_NUM(PK)   	NUMBER
P_NAME      	VARCHAR2(100)
P_PRICE   	NUMBER
P_COUNT		NUMBER

<관계>
1:1관계
- 어느 한쪽의 테이블에서 상태 테이블과 반드시 단 하나의 관계를 가지는 것
ex)국민 테이블
주민번호(PK)
이름

여권정보
여권번호
주민번호

1 : N 관계 (1대 다 관계)
한쪽 테이블이 관계를 맺은 쪽의 테이블에 여러객체를 가질 수 있는것
한명의 유저가 여러개의 물건을 주문할 수 있다.

N : M (다 대 다 관계)
관계를 맺고 있는 양쪽의 테이블 모두가 1 : N 관계를 가지는 것

학원		학생
한 학원에는 여러명의 학생이 다닐 수 있고
한명의 학생도 여러개의 학원을 다닐 수 있다.

N : M 관계는 두 테이블의 기본키를 컬럼으로 갖는 또 다른 테이블을 생성해서 관리한다.

1. 요구사항
꽃테이블과 화분테이블이 필요하다
꽃을 구매할때 화분도 같이 구매한다.
- 꽃테이블
	- 꽃이름
	- 꽃색깔
	- 꽃가격
- 화분
	-제품번호
	-화분색깔
	-화분모양
	-꽃이름

1. 논리모델링

- 꽃테이블
	- 꽃이름
	- 꽃색깔
	- 꽃가격
- 화분
	-제품번호
	-화분색깔
	-화분모양
	-꽃이름

2. 물리모델링

<FLOWER>
- F_NAME VARCHAR2(200) PRIMARY KEY 
- F_COLOR VARCHAR2(100)
- F_PRICE NUMBER

<POT>
- P_NUM NUMBER PRIMARY KEY
- P_COLOR VARCHAR2(100)
- P_SHAVE VARCHAR2(100)
- F_NAME VARCHAR2(200)
 CONSTRAINT FK_NAME FOREIGN KEY REFFERENCES FLOWER(F_NAME)

3. 테이블만들기

------------------------------------------------------------------------------------
DML(Data Manipulation Language )
1. SELECT : 데이터 조회
- 테이블에서 원하는 데이터를 조회할 때 사용하는 키워드

SELECT 컬럼명1,컬럼명2,컬럼명3..... FROM 테이블명;

SELECT 컬럼명1,컬럼명2,컬럼명3..... FROM 테이블명 WHERE 조건식;

WHERE 조건절
- 원하는 자료를 검색하기 위한 조건절
- WHERE 절에서는 결과를 제한하기 위한 조건을 기술할 수도 있다.
- WHERE절은 조회하려는 데이터에 특정 조건을 부여할 목적으로 사용하기 때문에 FROM절 뒤에 오게된다.

WHERE 절의 조건식은 다음과 같이 구성된다.
- 컬럼명이 왼쪽에 온다.
- 비교연산자가 가운데 온다.
	- >, <
	- >=, <=
	- =(같다)
	- !=(같지않다.), <>, ^=
	- AND : 그리고 
	- OR : 또는
	- 문자, 숫자, 표현식(조건식의 우측에 위치)

조건식에서 NULL 사용하기
사용법 : 컬럼명 IS NULL, 컬럼명 IS NOT NULL

SQL 연산자 
1. BETWEEN : A와 B사이의 값을 조회할때 사용
2. IN : OR을 대신해 사용하는 연산자
3. LIKE : 유사검색 %(모든값), _(하나의 값)
ex)'M%' : M으로 시작하는 모든 값
ex)'%a' : a로 끝나는 모든 값
ex)'%a%' : 값의 어디든 a를 포함하고 있는 모든 값
ex)'%M%I% : M과 I를 포함하고 있는 데이터
ex)'_M_' : M를 두번째 글자로 갖는 세글자 짜리 데이터
ex)'M_ _ _ _' : M으로 시작하는 값들 중 전체 길이가 5글자인 값



2. INSERT INTO : 데이터 추가
3. UPDATE : 데이터의 수정
4. DELETE : 데이터의 삭제



















