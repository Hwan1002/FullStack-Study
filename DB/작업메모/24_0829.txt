28일자 복습

FROM 절 : IN LINE VIEW -> 테이블처럼 사용
SELECT절 : SCALAR -> 컬럼처럼 사용
WHERE절 : SUBQUERY -> 값, 표현식처럼 사용

JOIN 두개 이상의 테이블을 연결하여 하나의 결과를 반환하는 테이블을 만드는것

<JOIN의 종류>
<INNER JOIN>
- 각 테이블에서 공통된 부분 데이터만 반환

1-1. SELF INNER JOIN
- 하나의 테이블에서 서로 다른 컬럼을 참조
 
1-2. CROSS INNER JOIN
- 모든 가능한 조합을 만들어 반환하는 JOIN 방법
  이를 통해 두 개 이상의 테이블을 조합하여 새로운 테이블을 생성할 수 있다.

<OUTER JOIN>
- 공통된 값을 가지지않는 행들도 반환

2-1 LEFT OUTER JOIN

2-2 RIGHT OUTER JOIN

3-3 FULL OUTER JOIN 

<VIEW>
가상의 테이블
- 복잡한 쿼리문의 결과를 내부에 가진다.
  보이지 않고 싶은 컬럼은 빼도 된다.
- 테이블 뿐만 아니라 다른 뷰를 참조해서 
  새로운 뷰를 만들 수 있다.

<TCL (Transaction Controll Language)>
트랜잭션의 특성
- 원자성
- 일관성
- 고립성
- 지속성 

----------------------------------------------------------------------------

<CASE문>
- 어떠한 조건에 맞춰 값을 출력하는 문법
- CASE WHEN 조건식 THEN '참 값' ELSE '거짓 값' END


<PL/SQL>
- 프로그래밍 언어의 특성을 수용하여 SQL에서 사용할 수 없는 절차적 프로그래밍 기능을 가지고 있는 SQL의 단점을 보완할 수 있는 프로그래밍 언어이다. 


<PL/SQL문을 사용하는 이유>
- 대용량 데이터를 연산해야 할 때 서버로 전송해서 처리하려면 네트워크에 부하가 많이 걸린다.
- 이때 프로시저나 함수를 사용하여 데이터를 연산하고 가공한 후에, 최종결과만 서버에 전송하면 부  담을 많이 줄일 수 있다.
- 로직을 수정하기 위해 서버를 껐다 켰다 하지 않아도 된다.
- 쿼리문을 직접 노출하지 않는 만큼, SQL Injection (해킹)의 위험성이 줄어든다.

<PL/SQL의 기본구조>
 DECLARE(선언부) PL/SQL문에서 사용하는 모든 변수나 상수를 선언하는 부분
 
 IS
 
 BEGIN(실행부) 절차적으로 SQL문을 실행할 수 있도록 절차적인 언어의 요소인 제어문, 반복문 
 함수의 정의 등 로직을 기술할 수 있는 부분
 END;(실행문 종료)

<PL/SQL 문의 종류>
- 프로시저 : 리턴값을 하나 이상 가질 수 있는 프로그램
- 함수 : 리턴 값을 반드시 반환해야 하는 프로그램
- 패키지 : 하나 이상의 프로시저, 함수, 변수, 등의 묶음
- 트리거 : 지정된 이벤트가 발생하면 자동으로 실행되는 PL/SQL블록

<IF문>
1. IF 조건 THEN 실행문;
   END IF;

2. IF 조건 THEN 실행문;
   ELSE 실행문;
   END IF;

3. IF 조건 THEN 실행문;
   ELSIF 조건문 THEN 실행문;
   ELSE 실행문;
   END IF;

<반복문>
1. FOR LOOP문

FOR i IN 시작값...END값 LOOP
	반복하고자 하는 명령
END LOOP;

2. WHILE문
WHILE 조건
LOOP
명령;
END LOOP;


<프로시저(PROCEDURE)>
- 데이터베이스에 대한 일련의 작업을 처리한 절차를 데이터베이스에 
  영구 저장하고 사용하는 모듈
- 쿼리를 함수처럼 사용하기 위한 쿼리의 집합
- 쿼리문내에서 사용이 불가능

장점
- 하나의 요청으로 여러 SQL문을 실행할 수 있다.
- 네트워크 소요 시간을 줄여 성능을 개선할 수 있다.
- 기능 변경이 편리하다.
- 서버에서 실행되기 때문에 속도가 빠르다
- 리턴값이 있을 수도 있고, 없을 수도 있다.
- 여러개의 리턴값을 보낼 수도 있다.

단점
- 재사용성이 좋지않다

<함수>
 하나의 특별한 목적의 작업을 수행하기 위해 독립적으로 설계된 코드의 집합
- 반환값이 무조건 있어야한다.
- 쿼리문 내에서 사용하는것이 가능하다.
- 클라이언트(화면)에서 값을 건네받고 서버에서 필요한 값을 가져와서
  클라이언트에서 작업을 하고 반환
- 그래서 프로시저보다는 속도가 느리다

CREATE OR REPLACE PROCEDURE 프로시저명(
	매개변수 IN 데이터타입 := 값,
	매개변수 IN 컬럼 % TYPE
);

IS
  함수 내에서 사용할 지역변수의 선언
BEGIN
  실행할 문장
END;

프로시저의 사용
CALL 프로시저명(값1,값2)


<프로시저와 SQL(DML) 접목하기>






