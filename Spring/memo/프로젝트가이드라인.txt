<스프링 부트 프로젝트 만들기>
start.spring.io

- java, gradle
- Group : com.korea
- Artifact : product

필요 의존성 라이브러리
- Spring Web
- H2
- Lombok
- Spring Data JPA


1. model 패키지에 entity 만들기 
ProductEntity 클래스 만들기

- 테이블명 product

속성 
- 상품id (primary key)
- 상품이름
- 상품재고
- 상품가격
- 등록날짜
- 수정날짜
(@CreationTimeStamp , @UpdateTimeStamp)
- insert와 update 쿼리가 발생했을때 그때의 시간을 적용시킨다\

2. dto 패키지에 productDTO 클래스 만들기

속성
- 상품번호
- 상품이름
- 상품재고
- 상품가격
- 등록날짜
- 수정날짜
기능
Entity -> DTO 변환기능
DTO -> Entity 변환기능


3. ResponseDTO
- 클라이언트와 데이터를 직접적으로 주고받기 위한 DTO클래스
- 제네릭타입을 가지고있다.

속성
- String error
- 리스트 data


4. ProductRepository 인터페이스 만들기
- JpaRepository 상속받기


5. 서비스 계층 만들기
ProductService 클래스 생성하기
-ProductRepository 주입하기


6. 표현 계층 만들기
ProductController 클래스 생성하기
- ProductService 주입하기

7. 조회하기 기능 만들기
- 데이터베이스에 들어있는 모든 상품을 조회하는 api만들기
- 결과는 ResponseDTO에 담아서 보내기

- ProductService : 전체 조회하는 메서드
- ProductController
- HTTPMETHOD : GET
- 메서드명 : productList()

8. 추가기능 만들기
- 클라이언트로 부터 데이터를 넘겨받아서 db에 데이터 추가하고
- 다시 모든데이터를 조회해서 반환하기
- ProductService에 create() 메서드 만들기
- ProductController에 POST로 받는 createProduct() 메서드 만들기



--------------------------------------------
9. 리액트로 상품 정보를 볼 수 있는 화면 만들기
- product-react-app 이름으로 리액트 프로젝트 만들기
- src에 p_info.js 만들기
- 하나의 출처에서 다른 출처로 REQUEST를 허용하기위해 
  CORS를 처리해야한다. config패키지를 만들고 그안에 WebMvcConfig클래스를 만들고
  WebMvcConfigurer 를 클래스에 구현하고 addCorsMappings를 오버라이딩 한다.



-axios로 백엔드에 데이터를 요청하고 받아와서 화면에 출력하기

----------------------------------------------------------------
10. 주문하기
OrderEntity
- com.korea.product.model에 OrderEntity클래스 만들기
속성
- 주문ID (primary key)
- 상품ID
- 주문개수
- 주문날짜 (insert 될때의 시간)

11. OrderDTO
- 주문내열을 조회할때 총 결제금액까지 보여줄것이다.

속성
- 주문번호
- 상품번호
- 상품이름
- 주문개수
- 상품가격
- 결제금액
- 주문날짜

12. repository만들기
- OrderRepository 인터페이스를 만들고 jpa를 상속받는다

13. OderService 클래스 
- OrderRepository 를 주입

14. OrderController 클래스
- OrderService를 주입
- mapping : orders


---------------------------------------------------
주문내역 조회하기
-List<Object[]> findAllOrderTotalPrices()

15. OrderService
- 메서드명 : getAllOrderTotalPrices()

16. OrderController
- HTTP 메서드 : GET
- 리소스 : total
- 메서드명 : getAllOrderTotals()

---------------------------------------------------
주문하기
- 클라이언트로 부터 productId와 productCount를 전달받아 
  주문테이블에 주문내역 추가하기

OrderService에 주문하기 로직을 만든다.
1. 상품이 존재하는지 확인 

2. 재고를 확인

3. 주문하기(DB에 주문내역 저장하기)

4. 재고감소

5. 전체 목록 반환하기

라디오 버튼을 누른 필드만 입력할 수 있게 하고
라디어 버튼을 누르고 주문개수를 입력해서 주문완료 버튼을 누르면 백엔드로 전달
