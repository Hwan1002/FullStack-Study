리액트 클론코딩 해보기
홈페이지 하나 골라 리액트로 만들어보기

1. 제어역전 (Inversion of Controll)
@Component, @Service, @RestController, @Repository
어노테이션이 붙은 클래스를 스프링 부트가 애플리케이션이 실행될 때 
먼저 Bean으로 만들어서 객체 컨테이너에 singleton 방식으로 저장해놓는다.

static 저장 - 싱글톤 패턴으로 메모리에 한번만 올려두고 필요할때 쓴다

List에 저장해야 하는 Entity는 싱글톤 패턴으로 만들면 안됨

2. DI(Dependency Injection) : 의존성 주입
자바에서는 클래스에 속해있는 메서드를 사용하기 위해서
객체를 직접 생성했었다. 스프링 부트에서는 직접 생성하지않고
만들어진 Bean을 가져다가 사용하는 형태이다.

@Component -> Battery를 Bean으로 만들어서 컨테이너에 저장
public class Battery{
	cap = 85;
}

publick class Toy{

	※첫번째 방법 <필드 주입>
	@Autowired (순환참조를 조심해서 사용해야함)
	Battery battery; -> Battery Bean을 주입해야함

	System.out.println("battery : " + battery.cap + "%" );

	※두번째 방법 <생성자 주입> (가장 모던한 방법)
	public Toy(Battery battery){
		this.battery = battery;
	}

}

※ 레이어드 아케텍처
- 프로젝트를 레이어를 구성해서 만든것

1. 표현계층
- 클라이언트의 요청과 맞닿는 부분이다.
- ooController라고 이름을 짓는 경우가 많다.	 DTO

	↓
					  ↑
2. 서비스 계층
- 비즈니스 로직을 설계하는 계층
- ooService				MODEL

	↓
					  ↑
3. 영속 계층
- DB와 맞닿는 부분
- ooRepository라고 이름을 짓는 경우가 많다.	ENTITY


@PathVariable
//localhost:9090/test/1

@RequestParam 
//localhost:9090/test/?id=123

@RequestBody


<객체 지향 설계 5대 원칙 -SOLID>
1. 단일 책임원칙 SRP(Single Resposibility Principle) 
- 하나의 메서드는 하나의 책임만 가져가야한다.

2. 개방 폐쇄 원칙 OCP (Open-Close Principle)
- 상속에는 Open, 변경에는 Close해야한다.
- 코드를 변경할 일이 있으면 변경하지말고, 웬만하면 상속을 통해서 변경해라

3. 리스코프 치환 원칙 LSP(Liskov Subtituion Principle)
- 같은 조상의 다른 클래스로 바꿔도 동작해야 한다.(다형성)

Spring Data JPA
-> Hibernate를 다른 구현체로 바꿔도 문제가 생기지 않는다.

slf4j
-> Logback, log4j 같이 다른 구현체로 바꿔도 문제가 생기지 않는다.

4. 인터페이스 분리 원칙 ISP(Interface Segregation Principle)
- 유사한 인터페이스가 있더라도 목적이 다르면 분리해야한다.

5. 의존관계 역전 원칙 DIP (Dependency Inversion Principle)
- 추상화에 의존한 코드를 작성해야 한다.
- 코드가 너무 구체적이면 변경에 불리하다.


create todo 구현
-> todo 아이템을 데이터베이스에 추가하는 기능

앞으로 영속레이어 > 서비스 레이어 > 표현레이어 순으로 구현 할것이다.


update todo 구현

영속계층 
TodoRepository

save(),findByUserId();

서비스계층
TodoService에 update() 메서드를 작성

DeleteTodo 기능 구현하기
-Todo를 삭제하기 위한 기능

영속계층
TodoRepository의 delete(), findByUserId() 메서드를 사용할 것

서비스계층 
delete() 메서드 만들기

표현계층 
delete()메서드

조회
GET localhost:9090/todo

TodoService에 create 함수 만들기 타입이 어떤게 들어올지 모르니
List에 제네릭 타입을 사용해서 TodoEntity 메서드로 아이디와 userid title

추가
POST localhost:9090/todo

수정
PUT localhost:9090/todo

삭제
DELETE localhost:9090/todo







