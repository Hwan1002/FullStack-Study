사용자 관리 시스템

프로젝트 생성
group : com.korea
artifact : user

필요라이브러리
Spring Web
H2
Lombok
Spring Data JPA

이클립스에 IMPORT 하기

Entity,DTO -> persistence -> Service -> Controller

com.korea.user.model 패키지 생성
-UserEntity 클래스 생성하기
-id,name,email 필드를 갖는다.
-매핑되는 테이블이름은 users
-id는 기본키이고 @GeneratedValue(stratgey = GenerationType.AUTO)로 값을 자동생성

com.korea.user.dto 패키지 생성
- UserDTO 클래스 생성하기
- id, name, email 필드를 갖는다.
- DTO에서 Entity, Entity에서 DTO로 변환하는 기능을 갖고있다.

com.korea.user.persistance 패키지 생성하기
- UserRepository 인터페이스 생성하기
- JpaRepository 상속받기

유저 생성하기
- 사용자를 생성하는 API만들기

com.korea.user.service 패키지만들기
- UserService 클래스 생성하기
- 사용자를 생성하는 create메서드 생성하기
- 생성하고 추가가 잘됐는지 리스트를 반환한다.
- src/main/resources 에서 application.properties안에 포트를 변경해준다
ex) server.port=9090


HTTP 메서드 : POST
메서드명 : createUser
사용자에게 추가하기 위한 이름과 이메일을 받아 추가한다.

모든 사용자 조회
- 모든 사용자를 조회할 수 있는 api 만들기

UserService에 getAllUsers() 메서드 만들기

UserController 
- HTTP메서드 : GET
- 메서드명 : getAllusers()


이메일을 통해 사용자 검색하기
UserRepository
- findByEmail()

UserService
-getUserByEmail()
-UserDTO로 반환

UserController
HTTP메서드 : GET
메서드명 : getUserByEmail()
리소스 : /{email}


ID 를 통해 이름과 이메일 수정하기
UserService
- updateUser()
- Optional로 ID를 통해 DB에서 사용자를 찾는다.
- 사용자가 존재할 경우 업데이트 로직을 실행
- 수정이 잘됐는지 전체 조회하는 메서드를 반환한다.

UserController
- HTTP메서드 : PUT
메서드명 : updateUser


삭제
- ID를 가지고 유저를 삭제하는 API만들기

UserService
메서드명 deleteUser
삭제 성공시 true, 실패시 false를 반환한다

UserController
HTTP 메서드 : DELETE
메서드명 : deleteUser
리소스 : /{id}

상품관리 시스템 만들기
- 제품의 정보를 관리하는 기능을 갖는 API 만들기

프로젝트 생성하기
group : com.korea
artfact : product

필요라이브러리
Spring web , h2, lombok, Spring Data JPA

ProductEntity
- id, name,description,price를 필드로 갖는다.
- id는 기본키로 설정한다.
- 매핑되는 테이블은 product로 한다.

ProductDTO
- 클라이언트와 데이터 교환을 위한 ProductDTO 클래스
- id, name,description,price를 필드로 갖는다.
- Entity -> DTO, DTO -> Entity로 변환하는 기능을 갖는다.


------------------------------------------------------------------

productDTO 
- 클라이언트와 데이터 교환을 위한 ProductDTO클래스
- id, name, description,price를 필드로 갖는다.
- Entity -> DTO, DTO-> Entity로 변환하는 기능을 갖는다

<상품 추가하기>
productService
- addProduct()메서드 만들기
- ProductDTO로 변환

ProductController
HTTP 메서드 : POST
메서드명 : addProduct()
- ResponseEntity에 반환받은 ProductDTO 응답바디에 실어서 보내기

<상품 조회하기>
ProductService
- getFilteredProducts(Double minPrice, String name)
- 반환형 List<ProductDTO>
- 매개변수에 아무것도 안들어왔을 때 전체 조회
- minPrice가 있으면 minPrice 금액 이상 제품들만 조회
- name에 값이 있으면 name을 포함하는 제품들만 조회
- minPrice랑 name값이 같이 들어오면 minPrice이상이면서 name값을 포함하는 제품 조회

ProductController
HTTP메서드 : GET
메서드명 : getFilteredProducts(Double minPrice, String name)
힌트 @RequestParam 사용하기


<상품 수정하기>
id를 통해서 제품의 내용 수정하기

ProductService 
-updateProduct() 메서드 만들기
- DB에 들어있는지 검증을 먼저 한 다음에
- 있으면 수정하려는 값으로 내용을 변경하고 반환
- 없으면 그냥 null 반환

ProductController
HTTP 메서드 : PUT
메서드명 : updateProduct()
리소스 : /{id}
- RequestBody로 수정하려는 데이터를 보내야함

<상품 삭제하기>
id를 통해서 db에 들어있는 데이터 삭제하기

ProductService
- deleteProduct()메서드 만들기
- id를 통해 데이터가 존재하면 삭제하기
- 삭제가 잘됐으면 true
- 삭제가 잘 안됐으면 false를 반환

ProductController
- HTTP 메서드 : DELETE
- 메서드명 : deleteProduct
- 리소스 : /{id}
