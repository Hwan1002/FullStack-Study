프론트엔드 + 백엔드 합치기

<특정 유저가 작성한 todo만 조회하기 (임시 계정을 쓰기때문에 지금은 의미없음)>

   클라이언트에서 요청
	↑↓
프론트엔드에서 fetch,axios
	↑↓
백엔드에서 TodoController
	↑↓
       TodoService
	↑↓	
         repository
	↑↓
       db 순으로 전달

<데이터 추가 (내가 입력한 데이터를 백엔드까지 보내야함)>
[vscode]
<App.js>
로그인 화면이 렌더링 될때


<login.js>
프론트엔드 VS code 에서 
로그인 화면을 만들어준다. 그럴려면 Login.js에서 로그인 컴포넌트를 만들어줘야 하는데
로그인 화면에 쓰여질 @mui 스타일들을 import 해준다.
import {container, Grid, Typography, TextField, Button, Container} from '@mui/material';

우선적으로 return안에 jsx를 만들어서 화면을 보며 디자인을 해준다.
위에서 import했던 스타일들을 활용하여 Container 태그를 만들고 Grid 태그안에
Typography(html 텍스트 태그를 자유롭게 사용하기위해 쓰임) 안에 로그인을 쓴다.

아래에는 데이터를 입력받아야 하기때문에 form태그를 사용하여 안에 입력받을 
input 태그들을(아이디,비밀번호) 작성해준다. input은 위에서 했던 예시로 TextFied(input 스타일링)태그를 활용한다.
우선 Grid item태그로 영역을 확실하게 나누어주고 그안에
아이디와 비밀번호 값을 받아야 하니깐 TextField를 두개 사용해서 작성한다.

하단에는 Grid item을 하나 더 만들어 form 태그안에 있는 데이터들을 보내기 위한 Button을 만든다.
(이버튼이 클릭시에 나오는 함수는 form 태그안에 onSubmit을 넣어 나중에 함수가 만들어진다면 넣어준다.)

클릭시 발생하는 함수는 event가 발생하면 먼저 페이지가 새로고침이 되지않도록 prevent.Default를 사용하여
기본동작을 막고 new Formdata메서드안에 타겟팅을 해주어 data 변수에 대입해준다.
변수 username과 password를 선언해서 data.get("username") 식으로 두가지 값을 대입해주고

이 값들을 받고 ApiService.js를 만들어서 form안에 데이터들을 가져와 token을 확인하여 
로컬스토리지에 ACCESS_TOKEN 키에 토큰 값을 넣어준다.
저장이 되었을경우 window.location.href 를 사용하여 보내주어야 하는 링크로 보내주고
그게 아닐시에 다시 로그인화면을 띄어준다.


