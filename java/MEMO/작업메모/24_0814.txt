/*제네릭 사용시 주의사항
 * 1. 제네릭 타입의 객체는 생성할 수 없다.
 * 제네릭 타입 자체로 타입을 지정하여 객체를 생성하는 것은 불가능하다.
 * ex) T t = new T(); -> X 안됌
 * 
 * 2. static 멤버에 제네릭 타입이 올 수 없음
 * static 멤버는 클래스가 동일하게 공유하는 변수로서
 * 제네릭 객체가 생성되기도전에 이미 자료 타입이 정해져 있어야 하기 때문이다.
 * 
 * 	static 메서드의 반환타입으로 사용이 불가능
 * 	 public static T getAge(int n){} -> X 안됌
 * 
 * 	static 메서드의 매개변수 타입으로 사용 불가
 *   public static void setAge(T age) { -> X 안됌
 *   
 *3. 제네릭으로 배열 선언 주의점
 *	기본적으로 제네릭 클래스 자체를 배열로 만들 수는 없다.
 * 	Sample<Integer>[] arr1 = new Sample<>[10]; -> X 안됌

 * */

/*중첩타입 파라미터
 * 제네릭 객체를 제네릭 타입 파라미터로 받는 형식으로 표현할 수 있다.
 * ArrayList자체도 하나의 타입으로서
 * 제네릭 타입 파라미터가 될 수 있기 때문에
 * 중첩 형식으로 사용할 수 있다.*/

/*제네릭 인터페이스
 * 인터페이스에도 제네릭을 붙힐 수 있음
 * 인터페이스를 구현(implements)한 클래스에서도
 * 오버라이딩한 메서드를 제네릭 타입에 맞춰서
 * 똑같이 구현해야 한다.*/

/*제네릭 타입 범위 한정하기
 * 제네릭에 타입을 지정해줌으로써 클래스의 타입을
 * 컴파일시에 정하여 타입예외에 대한 안정성을
 * 확보하는것은 좋지만 문제는 너무 자유롭다는 점이다.*/

//숫자만 받아 계산하는 계산기 클래스 모듈

/*타입 한정 키워드 extends
 * 작성방법 -> <T extends 제한타입>
 * 
 * extends 키워드 뒤에 올 타입은
 * 일반클래스, 추상클래스, 인터페이스 모두 가능하다.*/

/*다중 타입 한정
 *만일 2개 이상의 타입을 동시에 상속(구현)한 경우로 타입 제한을 하고 싶다면
 *&연산자를 사용하면 된다.
 *해당 인터페이스들을 동시에 구현한 클래스가 제네릭 타입의 대상이 되게 한다.
 *단, 자바에서는 다중 상속을 지원하지 않기 때문에
 *클래스로는 다중 extends는 불가능하고 오로지 인터페이스로만이 가능하다*/


/*제네릭의 형변환
 * 제네릭 캐스팅 문제
 * 배열과 같은 일반적인 변수 타입과 달리 제네릭 서브 타입간에는
 * 형변환이 불가능하다. 자연스럽게 다형성이 적용될 것이라고 생각할 수 있지만,
 * 실상 제네릭은 전달받은 타입으로만 캐스팅이 가능하다.*/

/*제네릭 와일드카드
 * 제네릭 타입에 들어갈 수 있는 범위를 한정
 * 제네릭 간의 형변환을 성립되게 하기 위해서는
 * 제네릭에서 제공하는 와일드카드 문법을 이용해야 한다. 
 *
 *<?> : Unbounded WildCards(제한없음)
 * 타입 파라미터를 대치하는 구체적인 타입으로 모든 클래스나 
 * 인터페이스 타입이 올 수 있다.
 *
 *<? extends 상위타입> : Upper Bounded WildCards(상위 클래스 제한)
 * 타입 파라미터를 대치하는 구체적인 타입으로
 * 상위 타입이나, 상위타입의 하위 타입만 올 수 있다.
 *
 *<? super 하위타입> : Lower Bounded WildCards(하위 클래스 제한)
 * 타입 파라미터를 대치하는 구체적인 타입으로
 * 하위 타입이나 하위 타입의 상위 타입만 올 수 있다.
 */

/*람다식
 * JDK1.8부터 함수형 프로그래밍 '람다식(Lambda expression)'을 지원하고 있다.
 * 람다식은 이름이 없는 익명 함수(anonymous function)를 만들기 위한 표현식을 말한다.
 * 자바는 객체를 기반으로 프로그램을 구현하는 객체 지향 프로그램이다.
 * 따라서 클래스를 먼저 생성하고, 클래스 안에 메서드와 객체를 만들어 사용해야 한다.
 * 
 *람다식이 도입된 이유
 * 함수형 프로그래밍 방식
 * 자바에서는 함수형 프로그래밍 방식이 적용되지 않았다.
 * 자바는 클래스에 함수를 정의하고 객체를 통해 호출하는 방식을 사용했다.
 * 
 *람다식 문법
 * 접근제한자, 반환형,메서드명, 모두 생략
 * 기존의 자바 문법과는 달라서 객체 지향 프로그래밍에 익숙한 개발자들은
 * 다소 생소할 수 있다.
 * 하지만 문법이 매우 간결해지고, 원하는 결과를 쉽게 집계할 수 있어 익숙해지면 큰 장점이 있다.
 * 기존 문법
 * int add(int x, int y){
		return x+y;
	}
	람다식 표현
	(int x,int y) -> {return x+y;}
	
 * 메서드의 이름과 반환 타입을 제거하고 화살표(->)를 이용해 구현한다.
 * 
 *소괄호 생략하기
 * 파라미터가 1개일 때 소괄호와 자료형을 생략할 수 있다.
 * 람다식 문법에서는 파라미터의 자료형을 생략할 수 있다.
 * 파라미터가 한 개인 경우에는 소괄호도 생략할 수 있다.
 * 그러나 두 개 이상일 경우에는 생략할 수 없다. 
 * (String str) -> {System.out.println(str);}
 * str -> {System.out.println(str);}
 *
 *
 *중괄호 생략하기
 * 함수의 반환형이 void라면 중괄호도 생략할 수 있다.
 * (x,y) -> System.out.println(x+y); 
 * 반환형이 있을때 return 키워드와 중괄호를 같이 생략할 수 있다.
 * (x,y)-> x+y;
 * 
*/